- Class: meta
  Course: R Programming_Alt
  Lesson: Functions
  Author: Sean Kross - переклад (oleksandkov | AI)
  Type: Standard
  Organization: swirlstats
  Version: 2.2.14

- Class: text
  Output: Функції — це один із фундаментальних будівельних блоків мови R. Вони є невеликими шматочками багаторазового коду, які можна використовувати як будь-який інший об'єкт R.

- Class: text
  Output: "Якщо ти вже проходила інші частини цього курсу, ти ймовірно вже використовувала деякі функції. Зазвичай функції характеризуються назвою функції, після якої йдуть дужки."

- Class: cmd_question
  Output: "Спробуймо використати кілька базових функцій просто для розваги. Функція Sys.Date() повертає рядок, що означає сьогоднішню дату. Введи Sys.Date() нижче та подивись, що станеться."
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: "Покажи сьогоднішню дату, ввівши: Sys.Date()"

- Class: text
  Output: "Більшість функцій у R повертають значення. Наприклад, Sys.Date() повертає значення, базуючись на середовищі твого комп'ютера, а інші функції змінюють вхідні дані, щоб обчислити результат."

- Class: cmd_question
  Output: "Функція mean() приймає на вхід вектор чисел і повертає середнє (арифметичне) всіх чисел у цьому векторі. Вхідні дані для функцій часто називають аргументами. Передача аргументів у функцію також іноді називається передачею параметрів. Аргументи, які ти хочеш передати функції, потрібно вказувати у дужках після її назви. Спробуй передати аргумент c(2, 4, 5) функції mean()."
  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: "Обчисли середнє для 2, 4 і 5, ввівши: mean(c(2, 4, 5))"

- Class: text
  Output: Функції зазвичай приймають аргументи — це змінні, з якими функція працює. Наприклад, функція mean() приймає вектор як аргумент, як у mean(c(2,6,8)). Функція mean() додає всі числа у векторі та ділить цю суму на довжину вектора.

- Class: text
  Output: У наступному питанні тобі буде запропоновано змінити скрипт, який з'явиться одразу після переходу далі. Коли ти завершиш редагування скрипту, збережи зміни та введи submit() — скрипт буде перевірено. У скрипті будуть коментарі, обов'язково прочитай їх!

- Class: script
  Output: Останній вираз, обчислений у функції, стане значенням, яке вона повертає. Ми хочемо, щоб ця функція приймала один аргумент x і повертала x без змін. Видали знак решітки (#), щоб x повертався без змін. Не забудь зберегти скрипт перед тим, як вводити submit().
  AnswerTests: test_func1()
  Hint: Видали символ #, щоб останній рядок функції був просто x.
  Script: boring_function.R

- Class: cmd_question
  Output: "Тепер, коли ти створила свою першу функцію — протестуй її! Введи: boring_function('Моя перша функція!'). Якщо твоя функція працює, вона просто поверне рядок: 'Моя перша функція!'"
  CorrectAnswer: "boring_function('Моя перша функція!')"
  AnswerTests: omnitest(correctExpr="boring_function('My first function!')")
  Hint: "Перевір boring_function, ввівши: boring_function('Моя перша функція!')"

- Class: text
  Output: "Вітаю з написанням першої функції! Створюючи функції, ти зможеш краще зрозуміти, як працює R. Як сказав Джон Чемберс, творець R:\n\n Щоб зрозуміти обчислення в R, дві тези корисні: 1. Все, що існує — це об'єкт. 2. Все, що відбувається — це виклик функції."

- Class: cmd_question
  Output: "Якщо ти хочеш побачити код будь-якої функції, просто введи ім'я функції без дужок і аргументів. Спробуй це для функції, яку ти щойно створила. Введи: boring_function, щоб переглянути її код."
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: "Щоб побачити код boring_function, просто введи: boring_function"

- Class: text
  Output: "Час створити кориснішу функцію! Зробимо власну версію функції mean() — назвемо її my_mean(). Щоб знайти середнє значення вектора чисел, потрібно підсумувати всі числа у векторі, а потім поділити цю суму на кількість чисел у векторі."

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func2()
  Hint: "Використай sum() для обчислення суми всіх чисел у векторі. Використай length() для визначення розміру вектора."
  Script: my_mean.R

- Class: cmd_question
  Output: "Тепер протестуй свою функцію my_mean(), знайшовши середнє значення для вектора c(4, 5, 10)."
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: "Використай команду my_mean(c(4, 5, 10)), щоб протестувати нову функцію." 

- Class: text
  Output: "Далі напишемо функцію з аргументами за замовчуванням. Ти можеш встановити стандартні значення для аргументів функції — це зручно, якщо користувач функції часто використовуватиме певне значення."

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func3()
  Hint: "Не забудь встановити відповідні значення за замовчуванням!"
  Script: remainder.R

- Class: cmd_question
  Output: "Протестуймо функцію remainder. Запусти remainder(5) та подивись, що станеться."
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: "Протестуй свою функцію, запустивши: remainder(5)"

- Class: text
  Output: "Давай розглянемо, що тільки-но трапилося. Ти передала один аргумент, і R підставив його в параметр 'num', бо він перший у списку. Для 'divisor' використалося значення за замовчуванням — 2."

- Class: cmd_question
  Output: "Тепер протестуй функцію, передавши два аргументи: remainder(11, 5)."
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: "Протестуй функцію, запустивши: remainder(11, 5)"

- Class: text
  Output: "Знову ж, аргументи були співставлені коректно."

- Class: cmd_question
  Output: "Аргументи можна явно задавати по імені, тоді порядок їх розміщення не має значення. Перевір це, ввівши: remainder(divisor = 11, num = 5)."
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: "Порядок більше не важливий, якщо явно вказуєш імена аргументів! Введи: remainder(divisor = 11, num = 5)"

- Class: text
  Output: "Як бачиш, є суттєва різниця між remainder(11, 5) та remainder(divisor = 11, num = 5)!"

- Class: cmd_question
  Output: "R також вміє частково співставляти імена аргументів. Введи remainder(4, div = 2), щоб побачити цю можливість у дії."
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: "Спробуй часткове співставлення, ввівши: remainder(4, div = 2)"

- Class: text
  Output: "Застереження: загалом слід робити свій код максимально зрозумілим. Переставляння порядку аргументів або використання часткових імен може заплутати, тож використовуй ці можливості обережно!"

- Class: cmd_question
  Output: "Якщо ти хочеш дізнатись, які аргументи приймає функція (окрім документації), скористайся функцією args(). Введи: args(remainder), щоб переглянути аргументи для функції remainder."
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: "Виведи аргументи функції, ввівши: args(remainder)"

- Class: text
  Output: "Ти, можливо, не помітила, але щойно виконала дещо цікаве! args() — це функція, remainder() — теж функція, але remainder був аргументом для args(). Так, це так: функції можна передавати як аргументи! Це дуже потужна ідея. Давай напишемо скрипт, щоб розібратись, як це працює."

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func4()
  Hint: "Коли передаєш функцію як аргумент, пиши її ім'я без дужок!"
  Script: evaluate.R

- Class: cmd_question
  Output: "Зараз протестуємо нову функцію evaluate(). Обчисли стандартне відхилення для вектора c(1.4, 3.6, 7.9, 8.8) за допомогою evaluate."
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: "Функція для стандартного відхилення — sd(). Передавай її ім'я без дужок!"

- Class: text
  Output: "Передача функцій як аргументів до інших функцій — це важлива та фундаментальна ідея в програмуванні."

- Class: text
  Output: "Ти можеш бути здивована, але функцію можна передати як аргумент, навіть не надаючи їй імені. Такі функції називаються анонімними."

- Class: text
  Output: "Давай за допомогою evaluate() розглянемо, як працюють анонімні функції. Для першого аргументу evaluate напишемо крихітну функцію в один рядок. У другий аргумент передамо дані, які ця анонімна функція використає."

- Class: cmd_question
  Output: "Введи таку команду, а потім ми її розберемо: evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: "Просто введи: evaluate(function(x){x+1}, 6)"

- Class: text
  Output: "Перший аргумент — це маленька анонімна функція, що приймає x і повертає x+1. Ми передали число 6, тому вираз повертає 7."

- Class: cmd_question
  Output: "Спробуй використати evaluate() разом з анонімною функцією, щоб повернути перший елемент вектора c(8, 4, 0). Твоя анонімна функція повинна мати лише один аргумент — x."
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: "Пригадай, як обирати елементи вектора. Анонімна функція повинна мати лише один аргумент з іменем x."

- Class: cmd_question
  Output: "Тепер спробуй використати evaluate() з анонімною функцією, щоб повернути останній елемент вектора c(8, 4, 0). Анонімна функція — один аргумент x."
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: "Пригадай, як обирати елементи вектора. Анонімна функція повинна мати лише один аргумент x. Може допомогти функція length()."

- Class: cmd_question
  Output: "Надалі у курсі ми часто використовуватимемо функцію paste(). Введи ?paste, щоб відкрити документацію для paste."
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: "Просто введи: ?paste"

- Class: text
  Output: "Як бачиш, перший аргумент paste() — це `...`, який називають еліпсисом (трьома крапками). Еліпсис дозволяє передавати у функцію необмежену кількість аргументів. У випадку paste() ти можеш передати скільки завгодно рядків, і paste() поверне об'єднаний рядок."

- Class: cmd_question
  Output: 'Для прикладу, як працює paste(), введи: paste("Програмування", "це", "цікаво!")'
  CorrectAnswer: paste("Programming", "is", "fun!")
  AnswerTests: omnitest(correctExpr='paste("Programming", "is", "fun!")')
  Hint: 'Введи: paste("Програмування", "це", "цікаво!")'

- Class: text
  Output: "Час написати власну змінену версію paste()."

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func5()
  Hint: "Пам'ятай, що аргументи можуть слідувати після ..."
  Script: telegram.R

- Class: cmd_question
  Output: "Тепер протестуй свою функцію telegram. Використай її, передавши будь-які аргументи на твій вибір!"
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: 'Використай функцію telegram з будь-якими аргументами.'

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func6()
  Hint: "Твоя функція повинна мати три частини: зібрати ... у list(), розпакувати аргументи та присвоїти змінним, потім передати ці змінні у paste()."
  Script: mad_libs.R

- Class: cmd_question
  Output: "Спробуй використати mad_libs. Обов'язково задай імена аргументів place, adjective та noun!"
  CorrectAnswer: mad_libs(adjective = "", place = "", noun = "")
  AnswerTests: expr_uses_func('mad_libs')
  Hint: 'Використай mad_libs та обовʼязково задай імена place, adjective і noun.'

- Class: text
  Output: "Ми вже майже закінчили цей урок, але залишилась ще одна важлива ідея."

- Class: text
  Output: "Ти вже знаєш, як додавати, віднімати, множити й ділити числа у R — для цього використовують символи +, -, * та /. Їх називають бінарними операторами, бо вони приймають два аргументи — лівий і правий."  

- Class: text
  Output: "У R ти можеш визначати власні бінарні оператори. У наступному скрипті я покажу, як це зробити."

- Class: script
  Output: Не забудь зберегти скрипт, перш ніж вводити submit().
  AnswerTests: test_func7()
  Hint: "Памʼятай: 'Привіт' %p% 'студентко!' — так використовують бінарний оператор."
  Script: bin_op.R

- Class: cmd_question
  Output: "Ти створила власний бінарний оператор! Перевір його, обʼєднавши рядки: 'Я', 'люблю', 'R!' за допомогою нового оператора."
  CorrectAnswer: "'I' %p% 'love' %p% 'R!'"
  AnswerTests: omnitest(correctExpr="'I' %p% 'love' %p% 'R!'")
  Hint: 'Використовуй %p% між кожним рядком.'

- Class: text
  Output: "Ми дійшли кінця цього уроку! Йди і пиши чудові функції!"
