- Class: meta
  Course: R Programming_Alt
  Lesson: Logic
  Author: Sean Kross - переклад (oleksandkov | AI)
  Type: Standard
  Organization: swirlstats
  Version: 2.2.15

- Class: text
  Output: "Цей урок є коротким вступом до логічних операцій в R."

- Class: text
  Output: "В R існує два логічних значення, які також називають булевими значеннями. Це TRUE (ІСТИНА) та FALSE (ХИБА). В R можна створювати логічні вирази, які будуть оцінюватися як TRUE або FALSE."

- Class: text
  Output: "Багато завдань у цьому уроці будуть пов'язані з обчисленням логічних виразів. Можливо, буде корисно відкрити другий термінал R, щоб експериментувати з цими виразами."

- Class: cmd_question
  Output: "Для створення логічних виразів потрібні логічні оператори. Ймовірно, ти вже знайома з арифметичними операторами `+`, `-`, `*` та `/`. Перший логічний оператор, який ми розглянемо — оператор рівності, який позначається двома знаками рівності `==`. Використай оператор рівності, щоб дізнатися, чи TRUE дорівнює TRUE."
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: "Використай оператор рівності і введи TRUE == TRUE"

- Class: text
  Output: "Так само, як і з арифметикою, логічні вирази можна групувати дужками, тому весь вираз (TRUE == TRUE) == TRUE буде TRUE."

- Class: cmd_question
  Output: "Щоб перевірити цю властивість, спробуй обчислити (FALSE == TRUE) == FALSE ."
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: "Спробуй написати: (FALSE == TRUE) == FALSE"

- Class: cmd_question
  Output: "Оператор рівності також можна використовувати для порівняння чисел. Використай `==`, щоб перевірити, чи 6 дорівнює 7."
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: "Використай оператор рівності та напиши 6 == 7"

- Class: text
  Output: "Попередній вираз дорівнює FALSE, бо 6 менше за 7. На щастя, існують оператори нерівності, які дозволяють перевірити, чи є значення меншим або більшим за інше."

- Class: cmd_question
  Output: "Оператор \"менше\" `<` перевіряє, чи число ліворуч від оператора менше за число праворуч. Напиши вираз, щоб перевірити, чи 6 менше за 7."
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: "Використай оператор \"менше\" та введи 6 < 7"

- Class: cmd_question
  Output: "Є також оператор \"менше або дорівнює\" `<=`, який перевіряє, чи лівий операнд менший або дорівнює правому. Напиши вираз, щоб перевірити, чи 10 менше або дорівнює 10."
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: "Використай оператор `<=` та введи 10 <= 10"

- Class: text
  Output: "Пам'ятай, що є також відповідні оператори \"більше\" `>` та \"більше або дорівнює\" `>=`."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює FALSE?"
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: "За потреби обчисли кожен вираз окремо в іншій R-сесії, щоб знайти правильну відповідь."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює TRUE?"
  CorrectAnswer: -6 > -7
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: "За потреби обчисли кожен вираз окремо в іншій R-сесії, щоб знайти правильну відповідь."

- Class: cmd_question
  Output: "Наступний оператор, який розглянемо — оператор \"не дорівнює\", що позначається як `!=`. Він перевіряє, чи два значення не рівні, тобто TRUE != FALSE дає TRUE. Як і оператор рівності, `!=` можна використовувати з числами. Спробуй написати вираз, щоб перевірити, чи 5 не дорівнює 7."
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: "Використай оператор \"не дорівнює\" і введи 5 != 7"

- Class: cmd_question
  Output: "Щоб заперечувати булеві вирази, використовуй оператор NOT. Знак оклику `!` перетворить !TRUE (читається: не істина) у FALSE, а !FALSE (не хиба) у TRUE. Спробуй використати NOT та оператор рівності, щоб знайти протилежне до 5 == 7."
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: "Цей вираз може бути трохи складним, тому подумай, як заперечити вираз 5 == 7 (постав знак оклику попереду)."

- Class: text
  Output: "Підсумуємо. Оператор рівності `==` перевіряє, чи два булевих значення або числа рівні, оператор \"не дорівнює\" `!=` перевіряє, чи вони не рівні, а оператор NOT `!` заперечує логічний вираз: TRUE стає FALSE, а FALSE — TRUE."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює FALSE?"
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: "За потреби обчисли кожен вираз окремо в іншій R-сесії, щоб знайти правильну відповідь."

- Class: mult_question
  Output: "Як ти думаєш, чому дорівнює цей вираз?: (TRUE != FALSE) == !(6 == 7)"
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Чи може існувати об'єктивна істина в програмуванні?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: "Спробуй обчислити кожну частину окремо, а потім зібрати відповідь."

- Class: text
  Output: "Іноді потрібно перевірити взаємозв'язок між кількома логічними виразами. Для цього існують оператор AND (та) і OR (або)."

- Class: cmd_question
  Output: "Давай розглянемо, як працює оператор AND. В R існує два оператори AND: `&` та `&&`. Обидва працюють схоже — якщо обидва операнди AND дорівнюють TRUE, то весь вираз TRUE, інакше — FALSE. Наприклад, TRUE & TRUE дорівнює TRUE. Спробуй набрати FALSE & FALSE і подивитися на результат."
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: "Щоб показати, як працює оператор AND, напиши: FALSE & FALSE"

- Class: cmd_question
  Output: "Ти можеш використовувати оператор `&` для поелементного застосування AND до вектора. Версія AND із двома знаками (`&&`) перевіряє лише перший елемент вектора. Давай протестуємо обидва варіанти. Введи вираз TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: TRUE & c(TRUE, FALSE, FALSE)
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Щоб побачити, як AND працює з вектором, введи: TRUE & c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "У цьому випадку лівий операнд `TRUE` буде \"розтягнутий\" на кожен елемент вектора. Це еквівалентно c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE)."

- Class: cmd_question
  Output: "Тепер наберемо той самий вираз, але використаємо оператор `&&`. Введи: TRUE && c(TRUE, FALSE, FALSE)."
  CorrectAnswer: TRUE && c(TRUE, FALSE, FALSE)
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: "Як побачиш, версія && працює по-іншому. Введи: TRUE && c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "У цьому випадку лівий операнд порівнюється лише з першим елементом вектора. Інші елементи вектора у цьому виразі не розглядаються."

- Class: text
  Output: "Оператор OR працює за схожими правилами. Версія OR `|` застосовується поелементно до вектора, а версія `||` перевіряє лише перший елемент вектора."

- Class: text
  Output: "Вираз з оператором OR буде TRUE, якщо хоча б один із операндів дорівнює TRUE. Якщо обидва — TRUE, то результат буде TRUE, а якщо жоден — тоді FALSE."

- Class: cmd_question
  Output: "Давай перевіримо, як працює поелементна версія оператора OR. Введи вираз TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: TRUE | c(TRUE, FALSE, FALSE)
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Спробуй поелементний OR, написавши: TRUE | c(TRUE, FALSE, FALSE)"

- Class: cmd_question
  Output: "Тепер спробуємо не векторизовану версію OR. Введи: TRUE || c(TRUE, FALSE, FALSE)."
  CorrectAnswer: TRUE || c(TRUE, FALSE, FALSE)
  AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Hint: "Як побачиш, версія || не є векторизованою. Напиши: TRUE || c(TRUE, FALSE, FALSE)"

- Class: text
  Output: "Логічні оператори можна поєднувати так само, як і арифметичні. Вирази на кшталт `6 != 10 && FALSE && 1 >= 2` або `TRUE || 5 < 9.3 || FALSE` цілком звичні."

- Class: cmd_question
  Output: "Як і арифметика, логічні вирази мають порядок обчислення. Оператори AND виконуються першими, а потім OR. Розгляньмо приклад з неоднозначністю. Введи: 5 > 8 || 6 != 8 && 4 > 3.9"
  CorrectAnswer: 5 > 8 || 6 != 8 && 4 > 3.9
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: "Перевір порядок операцій, ввівши: 5 > 8 || 6 != 8 && 4 > 3.9"

- Class: text
  Output: "Проаналізуймо порядок операцій: спершу обчислюються операнди AND — 6 не дорівнює 8, 4 більше за 3.9, обидва — TRUE, тож TRUE && TRUE дає TRUE. Потім обчислюється лівий операнд OR: 5 не більше за 8, тобто FALSE. Тепер весь вираз зводиться до FALSE || TRUE, а це TRUE."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює TRUE?"
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: "Обчисли кожен вираз окремо, а потім сформуй відповідь."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює FALSE?"
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79; 6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint: "Обчисли кожен вираз окремо, а потім сформуй відповідь."

- Class: text
  Output: "Тепер, коли ти ознайомилася з логічними операторами R, можна використовувати кілька функцій для роботи з логічними виразами."

- Class: cmd_question
  Output: "Функція isTRUE() приймає один аргумент. Якщо цей аргумент дорівнює TRUE, функція повертає TRUE. Інакше — FALSE. Спробуй використовувати цю функцію: isTRUE(6 > 4)"
  CorrectAnswer: isTRUE(6 > 4)
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Спробуй isTRUE(), написавши: isTRUE(6 > 4)"

- Class: mult_question
  Output: "Який з наступних виразів дорівнює TRUE?"
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE); isTRUE(3); isTRUE(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: "isTRUE() повертає TRUE лише тоді, коли вираз у дужках є TRUE."

- Class: cmd_question
  Output: "Функція identical() повертає TRUE, якщо два об'єкти R, передані їй як аргументи, ідентичні. Спробуй identical(), написавши: identical('twins', 'twins')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: "Щоб перевірити ідентичність об'єктів, напиши: identical('twins', 'twins')"

- Class: mult_question
  Output: "Який з наступних виразів дорівнює TRUE?"
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "identical() повертає TRUE лише якщо обидва аргументи ідентичні."

- Class: cmd_question
  Output: "Варто також знати про функцію xor(), яка приймає два аргументи. xor() означає виключне АБО. Якщо один аргумент TRUE, а інший FALSE — функція поверне TRUE; інакше — FALSE. Спробуй xor(), написавши: xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Спробуй xor(), написавши: xor(5 == 6, !FALSE)"

- Class: text
  Output: "5 == 6 дорівнює FALSE, !FALSE — це TRUE, тобто xor(FALSE, TRUE) повертає TRUE. А якщо перший аргумент був би 5 == 5, тобто TRUE, то xor(TRUE, TRUE) був би FALSE."

- Class: mult_question
  Output: "Який з наступних виразів дорівнює FALSE?"
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "Для xor() потрібен один TRUE і один FALSE, щоб результат був TRUE."

- Class: cmd_question
  Output: "У наступних завданнях нам знадобиться створити вектор цілих чисел з назвою ints. Створи цей вектор, ввівши: ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "Щоб створити вектор із десяти цілих чисел без повторень, введи: ints <- sample(10)"

- Class: cmd_question
  Output: "Тепер просто виведи вміст вектора ints."
  CorrectAnswer: ints
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "Щоб побачити вектор, введи: ints"

- Class: cmd_question
  Output: "Вектор ints — це випадкова вибірка чисел від 1 до 10 без повторень. Скажімо, ми хочемо задати логічні питання щодо ints. Якщо написати ints > 5, отримаємо логічний вектор, де TRUE означає, що елемент більший за 5. Спробуй: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "Щоб побачити, які елементи ints більші за 5, введи: ints > 5"

- Class: text
  Output: "Ми можемо використати отриманий логічний вектор для інших питань про ints. Функція which() приймає логічний вектор і повертає індекси, де значення TRUE. Наприклад, which(c(TRUE, FALSE, TRUE)) поверне вектор c(1, 3)."

- Class: cmd_question
  Output: "Використай which(), щоб знайти індекси елементів ints, які більші за 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Використай which() для логічного вектора, що дає ints > 7"

- Class: mult_question
  Output: "Яка з наступних команд дасть індекси елементів ints, що менші або дорівнюють 2?"
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: "Використай функцію which()."

- Class: text
  Output: "Як і which(), функції any() та all() приймають логічні вектори. any() повертає TRUE, якщо хоча б один елемент TRUE. all() повертає TRUE, якщо всі елементи TRUE."

- Class: cmd_question
  Output: "Використай any(), щоб перевірити, чи є серед ints елементи менші за нуль."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Використай any() для логічного вектора ints < 0"

- Class: cmd_question
  Output: "Використай all(), щоб перевірити, чи всі елементи ints більші за нуль."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Використай all() для логічного вектора ints > 0"

- Class: mult_question
  Output: "Який з наступних виразів дорівнює TRUE?"
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() повертає TRUE, якщо хоча б один елемент у логічному векторі TRUE."

- Class: text
  Output: "Це все для цього вступу до логіки в R. Якщо хочеш дізнатися, на що здатна логіка, переходь до уроку з керування потоком (control flow)!"

