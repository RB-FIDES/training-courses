- Class: meta
  Course: R Programming
  Lesson: Sequences of Numbers
  Author: Nick Carchedi
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: Галю, в цьому уроці ти навчишся створювати послідовності чисел (sequences of numbers) в R.

- Class: cmd_question
  Output: Найпростіший спосіб створити послідовність чисел в R - це використовувати оператор `:`. Набери 1:20 щоб побачити, як це працює.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Набери 1:20 без пробілів. Переконайся, що використовуєш звичайну двокрапку, а НЕ крапку з комою.

- Class: cmd_question
  Output: Це дало нам кожне ціле число між 1 та 20 (включно). Ми також можемо використовувати це для створення послідовності дійсних чисел (real numbers). Наприклад, спробуй pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Введи pi:10 і подивись, що станеться. pi - це заздалегідь визначена константа в R, яка має значення 3.1415....

- Class: text
  Output: Результат - це вектор дійсних чисел, що починається з pi (3.142...) і збільшується з кроком 1. Верхня межа 10 ніколи не досягається, оскільки наступне число в нашій послідовності було б більше за 10.

- Class: cmd_question
  Output: 'Що станеться, якщо ми зробимо 15:1? Спробуй, щоб дізнатися.'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Набери 15:1 і натисни Enter.

- Class: text
  Output: Воно рахувало назад з кроком 1! Навряд чи ми хотіли б такої поведінки, але все ж добре знати, як це може статися.

- Class: text
  Output: "Пам'ятай, що якщо в тебе є запитання про конкретну функцію R, ти можеш отримати доступ до її документації за допомогою знака запитання, за яким слідує назва функції: ?function_name_here. Однак, у випадку оператора, такого як двокрапка, що використовувалася вище, ти повинна помістити символ у зворотні лапки так: ?`:`. (ПРИМІТКА: Клавіша зворотної лапки (`) зазвичай розташована у верхньому лівому куті клавіатури, над клавішею Tab. Якщо у тебе немає клавіші зворотної лапки, ти можеш використовувати звичайні лапки.)"

- Class: cmd_question
  Output: Переглянь документацію для `:` зараз.
  CorrectAnswer: ?`:`
  AnswerTests: ANY_of_exprs('?`:`', "?':'", '?":"')
  Hint: "Щоб переглянути документацію для символа, такого як оператор двокрапки, ти повинна використовувати зворотні лапки (або звичайні лапки). Це потрібно для того, щоб R знав, що ти не намагаєшся використовувати символ у команді. Ось як це виглядає: ?`:`. Не забудь знак запитання на початку."

- Class: text
  Output: Часто ми хочемо більше контролю над послідовністю, яку створюємо, ніж дає нам оператор `:`. Функція seq() служить цій меті.

- Class: cmd_question
  Output: Найбазовіше використання seq() робить точно те саме, що й оператор `:`. Спробуй seq(1, 20), щоб побачити це.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Набери seq(1, 20) і натисни Enter. Пробіл після коми не обов'язковий, але рекомендується, оскільки він робить твій код менш захаращеним.

- Class: cmd_question
  Output: Це дає нам той самий результат, що й 1:20. Однак, скажімо, що замість цього ми хочемо вектор чисел у діапазоні від 0 до 10, з кроком 0.5. seq(0, 10, by=0.5) робить саме це. Спробуй.
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: Ти все ще використовуєш функцію seq(), але цього разу з додатковим аргументом (argument), який говорить R, що ти хочеш збільшувати свою послідовність на 0.5. Спробуй seq(0, 10, by=0.5).

- Class: cmd_question
  Output: Або, можливо, нас не цікавить, який крок, і ми просто хочемо послідовність з 30 чисел між 5 і 10. seq(5, 10, length=30) робить цю справу. Спробуй зараз і збережи результат у новій змінній під назвою my_seq.
  CorrectAnswer: my_seq <- seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: 'Ти використовуєш ту саму функцію, але змінюєш її аргументи для різних результатів. Переконайся, що зберігаєш результат у новій змінній під назвою my_seq, ось так: my_seq <- seq(5, 10, length=30).'

- Class: cmd_question
  Output: Щоб підтвердити, що my_seq має довжину (length) 30, ми можемо використати функцію length(). Спробуй зараз.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Використай length(my_seq) щоб переглянути довжину змінної my_seq.

- Class: text
  Output: Уявімо, що ми не знаємо довжини my_seq, але хочемо згенерувати послідовність цілих чисел від 1 до N, де N представляє довжину вектора my_seq. Іншими словами, ми хочемо новий вектор (1, 2, 3, ...), який має ту саму довжину, що й my_seq.

- Class: cmd_question
  Output: 'Є кілька способів, як ми можемо це зробити. Одна можливість - поєднати оператор `:` і функцію length() ось так: 1:length(my_seq). Спробуй це.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Спробуй 1:length(my_seq), не присвоюючи результат новій змінній.

- Class: cmd_question
  Output: Інший варіант - використати seq(along.with = my_seq). Спробуй це.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Набери seq(along.with = my_seq). Зверни увагу, що ми використовуємо ту саму функцію seq(), але з іншим аргументом під назвою `along.with`. Це говорить R, що ти хочеш послідовність 'вздовж' послідовності my_seq. Пам'ятай, ти можеш набрати ?seq, якщо в тебе є запитання про функцію seq().

- Class: cmd_question
  Output: Однак, як це часто буває з багатьма поширеними завданнями, R має окрему вбудовану функцію для цієї мети під назвою seq_along(). Набери seq_along(my_seq), щоб побачити її в дії.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: Функція seq_along() - це варіація функції seq(). Спробуй seq_along(my_seq), щоб отримати той самий результат ще одним способом.

- Class: text
  Output: Часто існує кілька підходів до вирішення тієї самої проблеми, особливо в R. Прості підходи, які передбачають менше набору тексту, зазвичай найкращі. Також важливо, щоб твій код був читабельним, щоб ти та інші могли зрозуміти, що відбувається, без особливих труднощів.

- Class: text
  Output: Якщо R має вбудовану функцію для конкретного завдання, ймовірно, ця функція високо оптимізована для цієї мети і є твоїм найкращим варіантом. Коли ти станеш більш досвідченим програмістом R, ти будеш створювати власні функції для виконання завдань, коли немає кращих варіантів. Ми дослідимо написання власних функцій у майбутніх уроках.

- Class: text
  Output: Ще одна функція, пов'язана зі створенням послідовностей чисел, - це rep(), що означає 'replicate' (повторювати). Давай подивимося на кілька застосувань.

- Class: cmd_question
  Output: Якщо нас цікавить створення вектора, який містить 40 нулів, ми можемо використати rep(0, times = 40). Спробуй.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Набери rep(0, times = 40), щоб створити вектор, що містить 40 нулів.

- Class: cmd_question
  Output: Якщо замість цього ми хочемо, щоб наш вектор містив 10 повторень вектора (0, 1, 2), ми можемо зробити rep(c(0, 1, 2), times = 10). Давай.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Спробуй rep(c(0, 1, 2), times = 10) для іншої варіації на ту саму тему. Переконайся, що використовуєш функцію c(), щоб сказати R, що числа 0, 1 і 2 утворюють вектор.

- Class: cmd_question
  Output: Нарешті, скажімо, що замість того, щоб повторювати вектор (0, 1, 2) знову і знову, ми хочемо, щоб наш вектор містив 10 нулів, потім 10 одиниць, потім 10 двійок. Ми можемо зробити це за допомогою аргументу `each`. Спробуй rep(c(0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Набери rep(c(0, 1, 2), each = 10), щоб побачити, як аргумент `each` функції rep() трохи змінює її поведінку.

- Class: mult_question
  Output: Чи хотіла б ти повідомити комусь про успішне завершення цього уроку?
  CorrectAnswer: NULL
  AnswerChoices: Так; Ні
  AnswerTests: notify()
  Hint: NULL
