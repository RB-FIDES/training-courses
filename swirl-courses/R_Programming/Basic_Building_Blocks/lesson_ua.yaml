- Class: meta
  Course: R Programming
  Lesson: Basic Building Blocks
  Author: Nick Carchedi (translated by Andriy Koval)
  Type: Standard
  Organization: JHU Biostat
  Version: 2.2.0

- Class: text
  Output: В цьому уроці, Сашу, ми вивчимо базові будівельні блоки мови програмування R.

- Class: text
  Output: Якщо у будь-який момент тобі потрібна додаткова інформація з певної теми в R, можеш набрати help.start() в командному рядку. Це відкриє меню ресурсів (або в RStudio, або в твоєму браузері, залежно від налаштувань). Альтернативно, простий пошук в інтернеті часто дає потрібну відповідь.

- Class: cmd_question
  Output: У найпростішій формі R можна використовувати як інтерактивний калькулятор. Набери 5 + 7 і натисни Enter.
  CorrectAnswer: 5 + 7
  AnswerTests: omnitest(correctExpr='5 + 7')
  Hint: Набери 5 + 7 і натисни Enter.

- Class: text
  Output: R просто виводить результат 12 за замовчуванням. Проте R - це мова програмування, і часто причина, чому ми використовуємо мову програмування замість калькулятора, полягає в автоматизації процесів або уникненні непотрібних повторень.

- Class: text
  Output: У цьому випадку ми можемо захотіти використати наш результат з попереднього прикладу в другому обчисленні. Замість того, щоб кожного разу набирати 5 + 7, коли нам це потрібно, ми можемо просто створити нову змінну (variable), яка зберігає результат.

- Class: text
  Output: Спосіб присвоєння (assignment) значення змінній в R полягає у використанні оператора присвоєння, який є просто символом "менше" з наступним знаком "мінус". Виглядає це так <- 

- Class: text
  Output: Уяви оператор присвоєння як стрілку. Ти присвоюєш значення з правого боку стрілки до назви змінної з лівого боку стрілки.

- Class: cmd_question
  Output: Щоб присвоїти результат 5 + 7 новій змінній під назвою x, набери x <- 5 + 7. Це можна прочитати як "x отримує 5 плюс 7". Спробуй зараз.
  CorrectAnswer: x <- 5 + 7
  AnswerTests: any_of_exprs('x <- 5 + 7', 'x <- 7 + 5')
  Hint: Набери x <- 5 + 7. Важливо включити один пробіл з кожного боку оператора присвоєння, але НЕ ставити пробіл між '<' і '-', які утворюють стрілку.

- Class: text
  Output: Ти помітиш, що цього разу R не вивів результат 12. Коли ти використовуєш оператор присвоєння, R припускає, що ти не хочеш відразу бачити результат, а скоріше маєш намір використати його для чогось іншого пізніше.

- Class: cmd_question
  Output: Щоб переглянути вміст змінної x, просто набери x і натисни Enter. Спробуй зараз.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Набери x і натисни Enter. Це автоматично виведе значення x.

- Class: cmd_question
  Output: Тепер збережи результат x - 3 у новій змінній під назвою y.
  CorrectAnswer: y <- x - 3
  AnswerTests: omnitest(correctExpr='y <- x - 3')
  Hint: Набери y <- x - 3 і натисни Enter. Неважливо, чи використовуєш ти x - 3 або x-3 - це питання особистих уподобань, але добрий звичай включати пробіл з обох боків оператора присвоєння.

- Class: cmd_question
  Output: Яке значення у y? Набери y, щоб дізнатися.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Набери y і натисни Enter.

- Class: text
  Output: Тепер створимо невелику колекцію чисел, яка називається вектор (vector). Будь-який об'єкт, що містить дані, називається структурою даних (data structure), і числові вектори є найпростішим типом структури даних в R. Фактично, навіть одне число вважається вектором довжиною один.

- Class: cmd_question
  Output: Найпростіший спосіб створити вектор - це функція c(), яка означає "concatenate" (конкатенувати) або "combine" (комбінувати). Щоб створити вектор, що містить числа 1.1, 9 і 3.14, набери c(1.1, 9, 3.14). Спробуй зараз і збережи результат у змінній під назвою z.
  CorrectAnswer: z <- c(1.1, 9, 3.14)
  AnswerTests: omnitest(correctExpr='z <- c(1.1, 9, 3.14)')
  Hint: Введення z <- c(1.1, 9, 3.14) присвоїть вектор (1.1, 9, 3.14) новій змінній під назвою z. Включення пробілів після ком у векторі не обов'язкове, але допомагає зробити твій код менш загромадженим і більш читабельним.

- Class: cmd_question
  Output: Коли у тебе є питання про певну функцію, ти можеш отримати доступ до вбудованих файлів довідки R через команду '?'. Наприклад, якщо тобі потрібна додаткова інформація про функцію c(), набери ?c без дужок, які зазвичай йдуть після назви функції. Спробуй.
  CorrectAnswer: ?c
  AnswerTests: omnitest(correctExpr='?c')
  Hint: Набери ?c і натисни Enter. Це відкриє файл довідки для функції c().

- Class: cmd_question
  Output: Набери z, щоб переглянути його вміст. Зверни увагу, що в результаті немає ком, які розділяють значення.
  CorrectAnswer: z
  AnswerTests: omnitest(correctExpr='z')
  Hint: Набери z і натисни Enter, щоб переглянути його вміст.

- Class: cmd_question
  Output: Ти можеш комбінувати вектори, щоб створити новий вектор. Створи новий вектор, який містить z, потім 555, потім знову z в такому порядку. Не присвоюй цей вектор новій змінній, щоб ми могли відразу побачити результат.
  CorrectAnswer: c(z, 555, z)
  AnswerTests: omnitest(correctExpr='c(z, 555, z)')
  Hint: Набери c(z, 555, z). Не створюй нову змінну. Ми просто хочемо переглянути результат.

- Class: cmd_question
  Output: "Числові вектори можна використовувати в арифметичних виразах. Набери наступне, щоб побачити, що станеться: z * 2 + 100."
  CorrectAnswer: z * 2 + 100
  AnswerTests: omnitest(correctExpr='z * 2 + 100')
  Hint: Введи z * 2 + 100, не присвоюючи результат змінній. Символ '*' використовується для множення і на багатьох клавіатурах знаходиться на одній клавіші з цифрою 8.

- Class: text
  Output: Спочатку R помножив кожен з трьох елементів z на 2. Потім додав 100 до кожного елемента, щоб отримати результат, який ти бачиш вище.

- Class: text
  Output: Інші поширені арифметичні оператори - це '+', '-', '/', і '^' (де x^2 означає "x у квадраті"). Щоб взяти квадратний корінь, використовуй функцію sqrt(), а для абсолютного значення - функцію abs().

- Class: cmd_question
  Output: Візьми квадратний корінь з z - 1 і присвой його новій змінній під назвою my_sqrt.
  CorrectAnswer: my_sqrt <- sqrt(z - 1)
  AnswerTests: omnitest(correctExpr='my_sqrt <- sqrt(z - 1)')
  Hint: Присвой результат sqrt(z - 1) змінній під назвою my_sqrt.

- Class: mult_question
  Output: Перед тим як переглянути вміст змінної my_sqrt, як ти думаєш, що вона містить?
  CorrectAnswer: вектор довжиною 3
  AnswerChoices: вектор довжиною 3; одне число (тобто вектор довжиною 1); вектор довжиною 0 (тобто порожній вектор)
  AnswerTests: omnitest(correctVal='вектор довжиною 3')
  Hint: Подумай про те, як R обробляв інші "векторизовані" операції - елемент за елементом.

- Class: cmd_question
  Output: Виведи вміст my_sqrt.
  CorrectAnswer: my_sqrt
  AnswerTests: omnitest(correctExpr='my_sqrt')
  Hint: Просто набери my_sqrt і натисни Enter, щоб переглянути його значення.

- Class: text
  Output: Як ти, мабуть, здогадалася, R спочатку відняв 1 від кожного елемента z, потім взяв квадратний корінь з кожного елемента. Це дає тобі вектор такої ж довжини, як і оригінальний вектор z.

- Class: cmd_question
  Output: Тепер створи нову змінну під назвою my_div, яка отримає значення z поділеного на my_sqrt.
  CorrectAnswer: my_div <- z / my_sqrt
  AnswerTests: omnitest(correctExpr='my_div <- z / my_sqrt')
  Hint: Введи my_div <- z / my_sqrt. Пробіли з обох боків знака '/' не обов'язкові, але часто можуть покращити читабельність, роблячи код менш загромадженим. Зрештою, це питання особистих уподобань.

- Class: mult_question
  Output: Яке твердження, на твою думку, правильне?
  CorrectAnswer: Перший елемент my_div дорівнює першому елементу z поділеному на перший елемент my_sqrt, і так далі...
  AnswerChoices: Перший елемент my_div дорівнює першому елементу z поділеному на перший елемент my_sqrt, і так далі...; my_div - це одне число (тобто вектор довжиною 1); my_div не визначено
  AnswerTests: omnitest(correctVal='Перший елемент my_div дорівнює першому елементу z поділеному на перший елемент my_sqrt, і так далі...')
  Hint: Подумай про те, як R обробляв інші "векторизовані" операції, такі як '+' і '*'.

- Class: cmd_question
  Output: Давай, виведи вміст my_div.
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Набери my_div і натисни Enter, щоб побачити його вміст.

- Class: text
  Output: Коли R отримує два вектори однакової довжини, він просто виконує зазначену арифметичну операцію ('+', '-', '*', тощо) елемент за елементом. Якщо вектори мають різну довжину, R "переробляє" (recycles) коротший вектор, поки він не стане такої ж довжини, як довший вектор.

- Class: text
  Output: Коли ми робили z * 2 + 100 в нашому попередньому прикладі, z був вектором довжиною 3, але технічно 2 і 100 - це кожен вектори довжиною 1.

- Class: text
  Output: За лаштунками R "переробляє" 2, щоб зробити вектор з двійок, і 100, щоб зробити вектор зі сотень. Іншими словами, коли ти просиш R обчислити z * 2 + 100, насправді він обчислює це - z * c(2, 2, 2) + c(100, 100, 100).

- Class: cmd_question
  Output: Щоб побачити інший приклад того, як працює це векторне "переробляння", спробуй додати c(1, 2, 3, 4) і c(0, 10). Не турбуйся про збереження результату в новій змінній.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10)')
  Hint: Введи c(1, 2, 3, 4) + c(0, 10) в консолі, щоб побачити, як R додає два вектори різної довжини. Не присвоюй результат змінній.

- Class: text
  Output: Якщо довжина коротшого вектора не ділиться рівно на довжину довшого вектора, R все одно застосує метод "переробляння", але видасть попередження, щоб повідомити тебе, що щось підозріле може відбуватися.

- Class: cmd_question
  Output: Спробуй c(1, 2, 3, 4) + c(0, 10, 100) для прикладу.
  CorrectAnswer: c(1, 2, 3, 4) + c(0, 10, 100)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4) + c(0, 10, 100)')
  Hint: Набери c(1, 2, 3, 4) + c(0, 10, 100), щоб побачити, як R обробляє додавання двох векторів, коли довжина коротшого вектора не ділиться рівно на довжину довшого вектора. Не турбуйся про присвоєння результату змінній.

- Class: text
  Output: Перед завершенням цього уроку я хотів би показати тобі кілька трюків для економії часу.

- Class: text
  Output: Раніше в уроці ти обчислювала z * 2 + 100. Припустимо, що ти зробила помилку і насправді хотіла додати 1000 замість 100. Ти можеш або перенабрати вираз, або...

- Class: cmd_question
  Output: В багатьох середовищах програмування стрілка вгору прокручує попередні команди. Спробуй натискати стрілку вгору на клавіатурі, поки не дійдеш до цієї команди (z * 2 + 100), потім зміни 100 на 1000 і натисни Enter. Якщо стрілка вгору не працює, просто набери виправлену команду.
  CorrectAnswer: z * 2 + 1000
  AnswerTests: omnitest(correctExpr='z * 2 + 1000')
  Hint: Якщо твоє середовище не підтримує функцію стрілки вгору, просто набери виправлену команду, щоб продовжити.

- Class: text
  Output: Нарешті, припустимо, що ти хочеш переглянути вміст змінної, яку створила раніше, але не можеш пригадати, чи назвала її my_div, чи myDiv. Ти можеш спробувати обидва варіанти і подивитися, що спрацює, або...

- Class: cmd_question
  Output: Ти можеш набрати перші два символи назви змінної, потім натиснути клавішу Tab (можливо, більше одного разу). Більшість середовищ програмування надасть список змінних, які ти створила, що починаються з "my". Це називається автодоповнення і може бути досить зручним, коли у тебе багато змінних в робочому просторі. Спробуй. (Якщо автодоповнення не працює, просто набери my_div і натисни Enter.)
  CorrectAnswer: my_div
  AnswerTests: omnitest(correctExpr='my_div')
  Hint: Якщо твоє середовище програмування не підтримує автодоповнення, просто набери my_div і натисни Enter, щоб продовжити.

- Class: mult_question
  Output: Чи хотіла б ти повідомити комусь про своє успішне завершення цього уроку?
  CorrectAnswer: NULL
  AnswerChoices: Так; Ні
  AnswerTests: notify()
  Hint: NULL
